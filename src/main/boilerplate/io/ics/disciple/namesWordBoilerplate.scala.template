package io.ics.disciple

import io.ics.disciple.dep._

import io.ics.disciple.util.Util._

import io.ics.disciple.injector._

sealed trait NamesWord

class NamesWord1(l1: L)(module: Module) extends NamesWord {
  def bind[T: TT, P1: TT](f: P1 => T) =
    module.copy(TTId(typeOf[T]) -> Dep(Injector1(f), getId[P1](l1) :: Nil) :: module.deps)
}

[1..21#class NamesWord2(l##1: L, [#l2: L#])(module: Module) extends NamesWord {
  def bind[T: TT, P##1: TT, [#P2: TT#]](f: (P##1, [#P2#]) => T) =
    module.copy(TTId(typeOf[T]) -> Dep(Injector2(f), getId[P##1](l##1) :: [#getId[P2](l2)# :: ] :: Nil) :: module.deps)
}#
]
