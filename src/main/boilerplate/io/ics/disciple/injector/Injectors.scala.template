package io.ics.disciple.injector

import io.ics.disciple.dep._

import io.ics.disciple.util.Util._

case class Injector0[T](inj: () => T) extends Injector[T] {
  override def apply(depIds: List[DepId], cm: DepGraph): T = inj()
}

case class Injector1[T, P1: TT](inj: P1 => T) extends Injector[T] {
  override def apply(argTags: List[DepId], cm: DepGraph): T = argTags match {
    case (id1: DepId) :: Nil =>
      inj(dep[P1](id1, cm))
    case _ => throw new IllegalArgumentException
  }
}

[1..21#case class Injector2[T, P##1: TT, [#P2: TT#]](inj: (P##1, [#P2#]) => T) extends Injector[T] {
  override def apply(argTags: List[DepId], cm: DepGraph): T = argTags match {
    case (id##1: DepId) :: [#(id2: DepId)# :: ] :: Nil =>
      inj(dep[P##1](id##1, cm), [#dep[P2](id2, cm)#])
    case _ => throw new IllegalArgumentException
  }
}#
]