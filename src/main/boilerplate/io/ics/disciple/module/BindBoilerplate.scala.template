package io.ics.disciple.module

import io.ics.disciple.Module

import io.ics.disciple.dep._

import io.ics.disciple.util.Util._

import io.ics.disciple.injector._

trait BindBoilerplate {
  this: Module =>

  def bind[T: TT](f: => T) = copy(TTId(typeOf[T]) -> Dep(Injector0(f _), Nil) :: deps)
  def bind[T: TT, P1: TT](f: P1 => T) = copy(TTId(typeOf[T]) -> Dep(Injector1(f), TTId(typeOf[P1]) :: Nil) :: deps)
  [1..21#def bind[T: TT, P##1: TT, [#P2: TT#]](f: (P##1, [#P2#]) => T) = copy(TTId(typeOf[T]) -> Dep(Injector2(f), TTId(typeOf[P##1]) :: [#TTId(typeOf[P2])# :: ] :: Nil) :: deps)#
  ]
}
